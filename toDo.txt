
* Definisci ADT
* Definisci Funzioni
* Definisci Lista
* Crea ADT.c/.h
* Crea List.c/.h
* Crea Interfaccia/Main.c
* Crea TestSuite






_______________________________

          A P P U N T I
_________________________________

ADT activity:

struct item{
	char* name; //
	char* descr; //
	char* course; //
	time_t insertDate; // SERVE???? per contenere la data in UNIX di quando è stata inserita;
	time_t expiryDate; // long double, conta i secondi da 1 gennaio 1970, ricordati di convertire in tempo "leggibile" quando stampi, https://www.geeksforgeeks.org/time-h-header-file-in-c-with-examples/
	time_t completionDate; // data in cui l'attività è stata completata
	time_t totalTime; // usalo per contenere il numero di secondi TOTALI per completare l'attività (durata della attività)
	time_t remainingTime; // usalo per contenere il numero di secondi RIMANENTI per completare l'attività (durata della attività);
	short unsigned int priority;	
}
inizializzazione
tutti i char* = NULL;
tutti i time_t = 0;
priority = 0;			0=basso 1=medio 2=alto


typedef struct item *activity;


Definisci Funzioni:

_______________FUNZIONI_ADT________________

- activity create_activity(char* name, char* descr, char* course, time_t insertDate, time_t expiryDate, time_t completionDate, time_t totalTime, time_t remainingTime, short unsigned int priority);
/*
Scopo:
	Utilizzata ogni volta che si vuole aggiungere una nuova attività nella lista.

S. Sintattica:
   Input:
	char* name; 
	char* descr; 
	char* course; 
	time_t insertDate; 
	time_t expiryDate; 
	time_t completionDate; 
	time_t totalTime; 
	time_t remainingTime; // sarà == totalTime
	short unsigned int priority;
  Output:
	activity new;

S. Semantica:
	Alloca dinamicamente la memoria per una nuova attività e la inzializza con i valori ricevuti, restituisce un puntatore alla attività allocate ed inizializzata
*/


- int free_activity(activity old)

/*
Scopo:
	Utilizzata ogni volta che Andiamo a rimuovere una attività dalla nostra lista

S. Sintattica

   Input:
	activity old
   Side effect:
	la memoria allocata per l'ADT activity passato in input viene deallocate
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	Dealloca la memoria allocata per l'attività, includendo le stringhe necessarie per contenere nome, descry e Corso
*/


- int print_activity(activity a)
/*
Scopo:
	Utilizzata ogni volta che mostriamo all'utente su linea di commando una attività

S. Sintattica
   Input:
	activity a
   Output:
	char* name; 
	char* descr; 
	char* course; 
	time_t insertDate; 
	time_t expiryDate; 
	time_t completionDate; 
	time_t totalTime; 
	time_t remainingTime; 
	short unsigned int priority;
   ----- su stdout -----
   restituisce
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione mostra i vari campi dell'attività all'utente tramite stdout, convertendo in tempo umano le varie date e tempi salvati in UNIX time.

*/

int update_priority_activity(activity a, short unsigned int newPriority)
/*
Scopo:
	Utilizzata ogni volta che l'utente vuole cambiare priorità ad una attività

S. Sintattica
   Input:
	activity a
	short unsigned int newPriority
   Side effect:
	a->priority = newPriority
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione modifica l'attività in modo da contenere la nuova priorità.

*/

int update_deadLine_activity(activity a, time_t newExpiryDate)
/*
Scopo:
	Utilizzata ogni volta che l'utente vuole cambiare la data di scadenza ad una attività

S. Sintattica
   Input:
	activity a
	time_t newExpiryDate
   Side effect:
	a->expiryDate = newExpiryDate
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione modifica l'attività in modo da contenere la nuova data di scadenza.

*/


int update_timeSpent_activity(activity a, time_t timeSpent)
/*
Scopo:
	Utilizzata ogni volta che l'utente vuole cambiare la quantità di tempo trascorsa su una attività e controlla se l'attività è stata completata

S. Sintattica
   Input:
	activity a
	time_t timeSpent
   Side effect:
	a->remainingTime -= timeSpent
        se a->remainingTime >= a->totalTime
		allora a->completitionDate = time(NULL)
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione modifica l'attività in modo da tenere traccia del tempo passato per una attività e inserisce la data occorente nel caso essa sia stata completata.

*/

int update_totalTime_activity(activity a, time_t newTotaltime)
/*
Scopo:
	Utilizzata ogni volta che l'utente vuole cambiare la quantità di tempo richiesta da una attività

S. Sintattica
   Input:
	activity a
	time_t newTotaltime
   Side effect:
	a->totalTime = newTotaltime
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione modifica l'attività in modo da contenere una nuova stima per il tempo richiesto a completarla.

*/


int update_name_activity(activity a, char* newName)
/*
Scopo:
	Utilizzata ogni volta che l'utente vuole cambiare nome ad una attività

S. Sintattica
   Input:
	activity a
	char* newName
   Side effect:
	free(a->name)
	a->name = newName
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione modifica l'attività in modo da modificare il nome della attività.

*/

int update_Descr_activity(activity a, char* newDescr)
/*
Scopo:
	Utilizzata ogni volta che l'utente vuole cambiare nome ad una attività

S. Sintattica
   Input:
	activity a
	char* newDescr
   Side effect:
	free(a->descr)
	a->descr = newDescr
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione modifica l'attività in modo da modificare la descrizione della attività.

*/

int update_course_activity(activity a, char* newCourse)
/*
Scopo:
	Utilizzata ogni volta che l'utente vuole cambiare il Corso a cui appartiene una attività

S. Sintattica
   Input:
	activity a
	char* newCourse
   Side effect:
	free(a->course)
	a->course = newCourse
   Output:
	1 in caso di successo
	0 in caso di errore

S. Semantica
	La funzione modifica l'attività in modo da modificare il Corso a cui appartiene l'attività.

*/

int check_name(activity a, char* title)
/*
Scopo:
	Utilizzata ogni volta che ricerchiamo una attività per nome all'interno della lista

S. Sintattica
   Input:
	activity a
	char* title
   Output:
	1 se a->name == title
	0 in ogni altro caso

S. Semantica
	La funzione restituisce o 1 o 0 a seconda se l'attività ha lo stesso nome dato in input

*/

int check_within_time(activity a, time_t timeWindow)

/*
Scopo:
	Utilizzata per creare il report settimanale

S. Sintattica
   Input:
	activity a
	time_t timeWindow
   Output:
	3 se a->completionDate == 0
	2 se a->expiryDate < time(NULL)
	1 se a->completionDate >= data attuale - timeWindow
	0 in ogni altro caso

S. Semantica
	La funzione restituisce o 1 se l'attività è stata completata questa settimana, 2 se è in ritardo, 3 se è in corso

*/



